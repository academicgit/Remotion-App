{"version":3,"sources":["code.js","App.js","index.js"],"names":["getId","url","id","URL","pathname","slice","match","e","DEFAULT_DOMAIN","DEFAULT_NOTION_URL","App","_useState","useState","_useState2","Object","slicedToArray","slugs","setSlugs","_useState3","_useState4","myDomain","setMyDomain","_useState5","_useState6","notionUrl","setNotionUrl","_useState7","_useState8","pageTitle","setPageTitle","_useState9","_useState10","pageDescription","setPageDescription","_useState11","_useState12","googleFont","setGoogleFont","_useState13","_useState14","customScript","setCustomScript","_useState15","_useState16","optional","setOptional","_useState17","_useState18","copied","setCopied","domain","myDomainHelperText","validDomain","undefined","notionUrlHelperText","link","hostname","endsWith","validNotionUrl","noError","script","data","replace","length","concat","map","_ref","_ref2","pageUrl","join","code","textarea","useRef","react_default","a","createElement","style","maxWidth","TextField","fullWidth","helperText","label","onChange","target","value","margin","placeholder","variant","index","customUrl","notionPageUrl","InputProps","startAdornment","InputAdornment","position","key","toConsumableArray","handleCustomURL","handleNotionPageURL","Button","onClick","deleteSlug","color","size","Collapse","in","timeout","unmountOnExit","multiline","rows","disabled","disableElevation","current","select","document","execCommand","Fragment","rowsMax","inputRef","rootElement","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.71010116.chunk.js","sourcesContent":["function getId(url) {\n    try {\n        const id = new URL(url).pathname.slice(-32);\n        if (id.match(/[0-9a-f]{32}/)) return id;\n        return '';\n    } catch (e) {\n        return '';\n    }\n}\n\nexport default function code(data) {\n    const {\n        myDomain,\n        notionUrl,\n        slugs,\n        pageTitle,\n        pageDescription,\n        googleFont,\n        customScript,\n    } = data;\n    let url = myDomain.replace('https://', '').replace('http://', '');\n    if (url.slice(-1) === '/') url = url.slice(0, url.length - 1);\n\n    return `  /* CONFIGURATION STARTS HERE */\n  \n  /* Step 1: enter your domain name like remotion.top */\n  const MY_DOMAIN = '${url}';\n  \n  /*\n   * Step 2: enter your URL slug to page ID mapping\n   * The key on the left is the slug (without the slash)\n   * The value on the right is the Notion page ID\n   */\n  const SLUG_TO_PAGE = {\n    '': '${getId(notionUrl)}',\n${slugs\n    .map(([pageUrl, notionUrl]) => {\n        const id = getId(notionUrl);\n        if (!id || !pageUrl) return '';\n        return `    '${pageUrl}': '${id}',\\n`;\n    })\n    .join('')}  };\n  \n  /* Step 3: enter your page title and description for SEO purposes */\n  const PAGE_TITLE = '${pageTitle || ''}';\n  const PAGE_DESCRIPTION = '${pageDescription || ''}';\n  \n  /* Step 4: enter a Google Font name, you can choose from https://fonts.google.com */\n  const GOOGLE_FONT = '${googleFont || ''}';\n  \n  /* Step 5: enter any custom scripts you'd like */\n  const CUSTOM_SCRIPT = \\`${customScript || ''}\\`;\n  \n  /* CONFIGURATION ENDS HERE */\n  \n  const PAGE_TO_SLUG = {};\n  const slugs = [];\n  const pages = [];\n  Object.keys(SLUG_TO_PAGE).forEach(slug => {\n    const page = SLUG_TO_PAGE[slug];\n    slugs.push(slug);\n    pages.push(page);\n    PAGE_TO_SLUG[page] = slug;\n  });\n  \n  addEventListener('fetch', event => {\n    event.respondWith(fetchAndApply(event.request));\n  });\n\n  function generateSitemap() {\n    let sitemap = '<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">';\n    slugs.forEach(\n      (slug) =>\n        (sitemap +=\n          '<url><loc>https://' + MY_DOMAIN + '/' + slug + '</loc></url>')\n    );\n    sitemap += '</urlset>';\n    return sitemap;\n  }\n  \n  const corsHeaders = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'GET, HEAD, POST, PUT, OPTIONS',\n    'Access-Control-Allow-Headers': 'Content-Type',\n  };\n  \n  function handleOptions(request) {\n    if (request.headers.get('Origin') !== null &&\n      request.headers.get('Access-Control-Request-Method') !== null &&\n      request.headers.get('Access-Control-Request-Headers') !== null) {\n      // Handle CORS pre-flight request.\n      return new Response(null, {\n        headers: corsHeaders\n      });\n    } else {\n      // Handle standard OPTIONS request.\n      return new Response(null, {\n        headers: {\n          'Allow': 'GET, HEAD, POST, PUT, OPTIONS',\n        }\n      });\n    }\n  }\n  \n  async function fetchAndApply(request) {\n    if (request.method === 'OPTIONS') {\n      return handleOptions(request);\n    }\n    let url = new URL(request.url);\n    url.hostname = 'www.notion.so';\n    if (url.pathname === '/robots.txt') {\n      return new Response('Sitemap: https://' + MY_DOMAIN + '/sitemap.xml');\n    }\n    if (url.pathname === '/sitemap.xml') {\n      let response = new Response(generateSitemap());\n      response.headers.set('content-type', 'application/xml');\n      return response;\n    }\n    let response;\n    if (url.pathname.startsWith('/app') && url.pathname.endsWith('js')) {\n      response = await fetch(url.toString());\n      let body = await response.text();\n      response = new Response(body.replace(/www.notion.so/g, MY_DOMAIN).replace(/notion.so/g, MY_DOMAIN), response);\n      response.headers.set('Content-Type', 'application/x-javascript');\n      return response;\n    } else if ((url.pathname.startsWith('/api'))) {\n      // Forward API\n      response = await fetch(url.toString(), {\n        body: url.pathname.startsWith('/api/v3/getPublicPageData') ? null : request.body,\n        headers: {\n          'content-type': 'application/json;charset=UTF-8',\n          'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36'\n        },\n        method: 'POST',\n      });\n      response = new Response(response.body, response);\n      response.headers.set('Access-Control-Allow-Origin', '*');\n      return response;\n    } else if (slugs.indexOf(url.pathname.slice(1)) > -1) {\n      const pageId = SLUG_TO_PAGE[url.pathname.slice(1)];\n      return Response.redirect('https://' + MY_DOMAIN + '/' + pageId, 301);\n    } else {\n      response = await fetch(url.toString(), {\n        body: request.body,\n        headers: request.headers,\n        method: request.method,\n      });\n      response = new Response(response.body, response);\n      response.headers.delete('Content-Security-Policy');\n      response.headers.delete('X-Content-Security-Policy');\n    }\n  \n    return appendJavascript(response, SLUG_TO_PAGE);\n  }\n  \n  class MetaRewriter {\n    element(element) {\n      if (PAGE_TITLE !== '') {\n        if (element.getAttribute('property') === 'og:title'\n          || element.getAttribute('name') === 'twitter:title') {\n          element.setAttribute('content', PAGE_TITLE);\n        }\n        if (element.tagName === 'title') {\n          element.setInnerContent(PAGE_TITLE);\n        }\n      }\n      if (PAGE_DESCRIPTION !== '') {\n        if (element.getAttribute('name') === 'description'\n          || element.getAttribute('property') === 'og:description'\n          || element.getAttribute('name') === 'twitter:description') {\n          element.setAttribute('content', PAGE_DESCRIPTION);\n        }\n      }\n      if (element.getAttribute('property') === 'og:url'\n        || element.getAttribute('name') === 'twitter:url') {\n        element.setAttribute('content', MY_DOMAIN);\n      }\n      if (element.getAttribute('name') === 'apple-itunes-app') {\n        element.remove();\n      }\n    }\n  }\n  \n  class HeadRewriter {\n    element(element) {\n      if (GOOGLE_FONT !== '') {\n        element.append(\\`<link href=\"https://fonts.googleapis.com/css?family=\\${GOOGLE_FONT.replace(' ', '+')}:Regular,Bold,Italic&display=swap\" rel=\"stylesheet\">\n        <style>* { font-family: \"\\${GOOGLE_FONT}\" !important; }</style>\\`, {\n          html: true\n        });\n      }\n      element.append(\\`<style>\n      div.notion-topbar > div > div:nth-child(3) { display: none !important; }\n      div.notion-topbar > div > div:nth-child(4) { display: none !important; }\n      div.notion-topbar > div > div:nth-child(5) { display: none !important; }\n      div.notion-topbar > div > div:nth-child(6) { display: none !important; }\n      div.notion-topbar-mobile > div:nth-child(3) { display: none !important; }\n      div.notion-topbar-mobile > div:nth-child(4) { display: none !important; }\n      div.notion-topbar > div > div:nth-child(1n).toggle-mode { display: block !important; }\n      div.notion-topbar-mobile > div:nth-child(1n).toggle-mode { display: block !important; }\n      </style>\\`, {\n        html: true\n      })\n    }\n  }\n  \n  class BodyRewriter {\n    constructor(SLUG_TO_PAGE) {\n      this.SLUG_TO_PAGE = SLUG_TO_PAGE;\n    }\n    element(element) {\n      element.append(\\`<div style=\"display:none\">Powered by <a href=\"http://fruitionsite.com\">Fruition</a></div>\n      <script>\n      window.CONFIG.domainBaseUrl = 'https://\\${MY_DOMAIN}';\n      const SLUG_TO_PAGE = \\${JSON.stringify(this.SLUG_TO_PAGE)};\n      const PAGE_TO_SLUG = {};\n      const slugs = [];\n      const pages = [];\n      const el = document.createElement('div');\n      let redirected = false;\n      Object.keys(SLUG_TO_PAGE).forEach(slug => {\n        const page = SLUG_TO_PAGE[slug];\n        slugs.push(slug);\n        pages.push(page);\n        PAGE_TO_SLUG[page] = slug;\n      });\n      function getPage() {\n        return location.pathname.slice(-32);\n      }\n      function getSlug() {\n        return location.pathname.slice(1);\n      }\n      function updateSlug() {\n        const slug = PAGE_TO_SLUG[getPage()];\n        if (slug != null) {\n          history.replaceState(history.state, '', '/' + slug);\n        }\n      }\n      function onDark() {\n        el.innerHTML = '<div title=\"Change to Light Mode\" style=\"margin-left: auto; margin-right: 14px; min-width: 0px;\"><div role=\"button\" tabindex=\"0\" style=\"user-select: none; transition: background 120ms ease-in 0s; cursor: pointer; border-radius: 44px;\"><div style=\"display: flex; flex-shrink: 0; height: 14px; width: 26px; border-radius: 44px; padding: 2px; box-sizing: content-box; background: rgb(46, 170, 220); transition: background 200ms ease 0s, box-shadow 200ms ease 0s;\"><div style=\"width: 14px; height: 14px; border-radius: 44px; background: white; transition: transform 200ms ease-out 0s, background 200ms ease-out 0s; transform: translateX(12px) translateY(0px);\"></div></div></div></div>';\n        document.body.classList.add('dark');\n        __console.environment.ThemeStore.setState({ mode: 'dark' });\n      };\n      function onLight() {\n        el.innerHTML = '<div title=\"Change to Dark Mode\" style=\"margin-left: auto; margin-right: 14px; min-width: 0px;\"><div role=\"button\" tabindex=\"0\" style=\"user-select: none; transition: background 120ms ease-in 0s; cursor: pointer; border-radius: 44px;\"><div style=\"display: flex; flex-shrink: 0; height: 14px; width: 26px; border-radius: 44px; padding: 2px; box-sizing: content-box; background: rgba(135, 131, 120, 0.3); transition: background 200ms ease 0s, box-shadow 200ms ease 0s;\"><div style=\"width: 14px; height: 14px; border-radius: 44px; background: white; transition: transform 200ms ease-out 0s, background 200ms ease-out 0s; transform: translateX(0px) translateY(0px);\"></div></div></div></div>';\n        document.body.classList.remove('dark');\n        __console.environment.ThemeStore.setState({ mode: 'light' });\n      }\n      function toggle() {\n        if (document.body.classList.contains('dark')) {\n          onLight();\n        } else {\n          onDark();\n        }\n      }\n      function addDarkModeButton(device) {\n        const nav = device === 'web' ? document.querySelector('.notion-topbar').firstChild : document.querySelector('.notion-topbar-mobile');\n        el.className = 'toggle-mode';\n        el.addEventListener('click', toggle);\n        nav.appendChild(el);\n        onLight();\n      }\n      const observer = new MutationObserver(function() {\n        if (redirected) return;\n        const nav = document.querySelector('.notion-topbar');\n        const mobileNav = document.querySelector('.notion-topbar-mobile');\n        if (nav && nav.firstChild && nav.firstChild.firstChild\n          || mobileNav && mobileNav.firstChild) {\n          redirected = true;\n          updateSlug();\n          addDarkModeButton(nav ? 'web' : 'mobile');\n          const onpopstate = window.onpopstate;\n          window.onpopstate = function() {\n            if (slugs.includes(getSlug())) {\n              const page = SLUG_TO_PAGE[getSlug()];\n              if (page) {\n                history.replaceState(history.state, 'bypass', '/' + page);\n              }\n            }\n            onpopstate.apply(this, [].slice.call(arguments));\n            updateSlug();\n          };\n        }\n      });\n      observer.observe(document.querySelector('#notion-app'), {\n        childList: true,\n        subtree: true,\n      });\n      const replaceState = window.history.replaceState;\n      window.history.replaceState = function(state) {\n        if (arguments[1] !== 'bypass' && slugs.includes(getSlug())) return;\n        return replaceState.apply(window.history, arguments);\n      };\n      const pushState = window.history.pushState;\n      window.history.pushState = function(state) {\n        const dest = new URL(location.protocol + location.host + arguments[2]);\n        const id = dest.pathname.slice(-32);\n        if (pages.includes(id)) {\n          arguments[2] = '/' + PAGE_TO_SLUG[id];\n        }\n        return pushState.apply(window.history, arguments);\n      };\n      const open = window.XMLHttpRequest.prototype.open;\n      window.XMLHttpRequest.prototype.open = function() {\n        arguments[1] = arguments[1].replace('\\${MY_DOMAIN}', 'www.notion.so');\n        return open.apply(this, [].slice.call(arguments));\n      };\n    </script>\\${CUSTOM_SCRIPT}\\`, {\n        html: true\n      });\n    }\n  }\n  \n  async function appendJavascript(res, SLUG_TO_PAGE) {\n    return new HTMLRewriter()\n      .on('title', new MetaRewriter())\n      .on('meta', new MetaRewriter())\n      .on('head', new HeadRewriter())\n      .on('body', new BodyRewriter(SLUG_TO_PAGE))\n      .transform(res);\n  }`;\n}\n","import React, { useState, useRef } from \"react\";\nimport { Button, Collapse, InputAdornment, TextField } from \"@material-ui/core\";\nimport code from \"./code\";\nimport \"./styles.css\";\n\nconst DEFAULT_DOMAIN = \"remotion.top\";\nconst DEFAULT_NOTION_URL =\n  \"https://remotion.notion.site/771ef38657244c27b9389734a9cbff44\";\n\nfunction validDomain(domain) {\n  return domain.match(\n    /^((https:\\/\\/)|(http:\\/\\/))?[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9](?:\\.[a-zA-Z]{2,})+(\\/)?$/\n  );\n}\n\nfunction validNotionUrl(url) {\n  if (!url) return true;\n  try {\n    const link = new URL(url);\n    return (\n      (link.hostname.endsWith(\"notion.so\") || link.hostname.endsWith(\"notion.site\")) &&\n      link.pathname.slice(-32).match(/[0-9a-f]{32}/)\n    );\n  } catch (e) {\n    return false;\n  }\n}\n\nexport default function App() {\n  const [slugs, setSlugs] = useState([]);\n  const [myDomain, setMyDomain] = useState(\"\");\n  const [notionUrl, setNotionUrl] = useState(\"\");\n  const [pageTitle, setPageTitle] = useState(\"\");\n  const [pageDescription, setPageDescription] = useState(\"\");\n  const [googleFont, setGoogleFont] = useState(\"\");\n  const [customScript, setCustomScript] = useState(\"\");\n  const [optional, setOptional] = useState(false);\n  const [copied, setCopied] = useState(false);\n  const handleMyDomain = e => {\n    setMyDomain(e.target.value);\n    setCopied(false);\n  };\n  const handleNotionUrl = e => {\n    setNotionUrl(e.target.value);\n    setCopied(false);\n  };\n  const handlePageTitle = e => {\n    setPageTitle(e.target.value);\n    setCopied(false);\n  };\n  const handlePageDescription = e => {\n    setPageDescription(e.target.value);\n    setCopied(false);\n  };\n  const handleGoogleFont = e => {\n    setGoogleFont(e.target.value);\n    setCopied(false);\n  };\n  const handleCustomScript = e => {\n    setCustomScript(e.target.value);\n    setCopied(false);\n  };\n  const addSlug = () => {\n    setSlugs([...slugs, [\"\", \"\"]]);\n    setCopied(false);\n  };\n  const deleteSlug = index => {\n    setSlugs([...slugs.slice(0, index), ...slugs.slice(index + 1)]);\n    setCopied(false);\n  };\n  const handleCustomURL = (value, index) => {\n    setSlugs([\n      ...slugs.slice(0, index),\n      [value, slugs[index][1]],\n      ...slugs.slice(index + 1)\n    ]);\n    setCopied(false);\n  };\n  const handleNotionPageURL = (value, index) => {\n    setSlugs([\n      ...slugs.slice(0, index),\n      [slugs[index][0], value],\n      ...slugs.slice(index + 1)\n    ]);\n    setCopied(false);\n  };\n  const handleOptional = () => {\n    setOptional(!optional);\n  };\n  const domain = myDomain || DEFAULT_DOMAIN;\n  const url = notionUrl || DEFAULT_NOTION_URL;\n  const myDomainHelperText = !validDomain(domain)\n    ? \"Please enter a valid domain\"\n    : undefined;\n  const notionUrlHelperText = !validNotionUrl(notionUrl)\n    ? \"Please enter a valid Notion Page URL\"\n    : undefined;\n  const noError = !myDomainHelperText && !notionUrlHelperText;\n  const script = noError\n    ? code({\n        myDomain: domain,\n        notionUrl: url,\n        slugs,\n        pageTitle,\n        pageDescription,\n        googleFont,\n        customScript\n      })\n    : undefined;\n  const textarea = useRef(\"\");\n  const copy = () => {\n    if (!noError) return;\n    textarea.current.select();\n    document.execCommand(\"copy\");\n    setCopied(true);\n  };\n  return (\n    <section style={{ maxWidth: 666 }}>\n      <TextField\n        fullWidth\n        helperText={myDomainHelperText}\n        label=\"Your Domain (e.g. remotion.top)\"\n        onChange={handleMyDomain}\n        margin=\"normal\"\n        placeholder={DEFAULT_DOMAIN}\n        value={myDomain}\n        variant=\"outlined\"\n      />\n      <TextField\n        fullWidth\n        helperText={notionUrlHelperText}\n        label={`Notion URL for ${domain}`}\n        margin=\"normal\"\n        onChange={handleNotionUrl}\n        placeholder={DEFAULT_NOTION_URL}\n        value={notionUrl}\n        variant=\"outlined\"\n      />\n      {slugs.map(([customUrl, notionPageUrl], index) => {\n        return (\n          <section>\n            <TextField\n              fullWidth\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">{`${domain}/`}</InputAdornment>\n                )\n              }}\n              key=\"key\"\n              label=\"Pretty Link\"\n              margin=\"normal\"\n              placeholder=\"about\"\n              onChange={e => handleCustomURL(e.target.value, index)}\n              value={customUrl}\n              variant=\"outlined\"\n            />\n            <TextField\n              fullWidth\n              label={`Notion URL for ${domain}/${customUrl || \"about\"}`}\n              key=\"value\"\n              margin=\"normal\"\n              placeholder={DEFAULT_NOTION_URL}\n              onChange={e => handleNotionPageURL(e.target.value, index)}\n              value={notionPageUrl}\n              variant=\"outlined\"\n            />\n            <Button\n              onClick={() => deleteSlug(index)}\n              variant=\"outlined\"\n              color=\"secondary\"\n              size=\"small\"\n            >\n              Delete this pretty link\n            </Button>\n          </section>\n        );\n      })}\n      <section>\n        <Button\n          onClick={addSlug}\n          size=\"small\"\n          variant=\"outlined\"\n          color=\"secondary\"\n        >\n          Add a pretty link\n        </Button>\n      </section>\n      <section>\n        <Button\n          onClick={handleOptional}\n          size=\"small\"\n          variant=\"outlined\"\n          color=\"secondary\"\n        >\n          Toggle Style And Script Settings\n        </Button>\n      </section>\n      <Collapse in={optional} timeout=\"auto\" unmountOnExit>\n        <TextField\n          fullWidth\n          label=\"Page Title\"\n          margin=\"normal\"\n          onChange={handlePageTitle}\n          value={pageTitle}\n          variant=\"outlined\"\n        />\n        <TextField\n          fullWidth\n          label=\"Page Description\"\n          margin=\"normal\"\n          onChange={handlePageDescription}\n          value={pageDescription}\n          variant=\"outlined\"\n        />\n        <TextField\n          fullWidth\n          label=\"Custom Google Font\"\n          margin=\"normal\"\n          placeholder=\"Open Sans\"\n          onChange={handleGoogleFont}\n          value={googleFont}\n          variant=\"outlined\"\n        />\n        <TextField\n          fullWidth\n          label=\"Paste Your Custom Script\"\n          margin=\"normal\"\n          multiline\n          placeholder=\"e.g. Google Analytics\"\n          onChange={handleCustomScript}\n          rows={2}\n          value={customScript}\n          variant=\"outlined\"\n        />\n      </Collapse>\n      <section>\n        <Button\n          disabled={!noError}\n          variant=\"contained\"\n          color=\"secondary\"\n          disableElevation\n          onClick={copy}\n        >\n          {copied ? \"Copied!\" : \"Copy the code\"}\n        </Button>\n      </section>\n      {noError ? (\n        <>\n          <TextField\n            fullWidth\n            margin=\"normal\"\n            rowsMax={10}\n            multiline\n            inputRef={textarea}\n            value={script}\n            variant=\"filled\"\n          />\n        </>\n      ) : (\n        \"\"\n      )}\n    </section>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}